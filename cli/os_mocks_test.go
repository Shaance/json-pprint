// Code generated by MockGen. DO NOT EDIT.
// Source: os.go
//
// Generated by this command:
//
//	mockgen -source=os.go -destination=os_mocks_test.go -package=main -typed
//
// Package main is a generated GoMock package.
package cli

import (
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOSInterface is a mock of OSInterface interface.
type MockOSInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOSInterfaceMockRecorder
}

// MockOSInterfaceMockRecorder is the mock recorder for MockOSInterface.
type MockOSInterfaceMockRecorder struct {
	mock *MockOSInterface
}

// NewMockOSInterface creates a new mock instance.
func NewMockOSInterface(ctrl *gomock.Controller) *MockOSInterface {
	mock := &MockOSInterface{ctrl: ctrl}
	mock.recorder = &MockOSInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOSInterface) EXPECT() *MockOSInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOSInterface) Create(name string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOSInterfaceMockRecorder) Create(name any) *OSInterfaceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOSInterface)(nil).Create), name)
	return &OSInterfaceCreateCall{Call: call}
}

// OSInterfaceCreateCall wrap *gomock.Call
type OSInterfaceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *OSInterfaceCreateCall) Return(arg0 *os.File, arg1 error) *OSInterfaceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *OSInterfaceCreateCall) Do(f func(string) (*os.File, error)) *OSInterfaceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *OSInterfaceCreateCall) DoAndReturn(f func(string) (*os.File, error)) *OSInterfaceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadFile mocks base method.
func (m *MockOSInterface) ReadFile(name string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockOSInterfaceMockRecorder) ReadFile(name any) *OSInterfaceReadFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockOSInterface)(nil).ReadFile), name)
	return &OSInterfaceReadFileCall{Call: call}
}

// OSInterfaceReadFileCall wrap *gomock.Call
type OSInterfaceReadFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *OSInterfaceReadFileCall) Return(arg0 []byte, arg1 error) *OSInterfaceReadFileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *OSInterfaceReadFileCall) Do(f func(string) ([]byte, error)) *OSInterfaceReadFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *OSInterfaceReadFileCall) DoAndReturn(f func(string) ([]byte, error)) *OSInterfaceReadFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
